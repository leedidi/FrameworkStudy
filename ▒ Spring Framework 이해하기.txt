■■■ Spring Framework 이해하기 ■■■

○ 개요

   1. Framework
      //@ 자바 컬렉션 프레임워크때 한 얘기 : 틀, 약속, 환경
      어플리케이션을 구현하고 관리하는 환경(틀, 약속)

   2. Spring Framework
      //@ 스프링 주연의 틀, 스프링 주연의 환경, 스프링 주연의 약속...
      //@ 1도 안어렵게 진행할 거.. 개념 잡을 때 집중해주기!
      설정 정보(XML)에 의해 어플리케이션을 구성하고,
      객체를 생성, 관리하는 주체.

○ 스프링 프레임워크(Spring Framework)의 개념
   
   스프링은 자바 엔터프라이즈 어플리케이션 개발에 사용되는
   어플리케이션 프레임워크.

   어플리케이션 프레임워크는 어플리케이션 개발을 빠르고
   효율적으로 할 수 있도록 어플리케이션의 바탕이 되는 틀과
   공통 프로그래밍 모델, 그리고 API 등을 제공해 준다.

   //@ 이걸 같이 써봐라...! 했는데 스프링 프레임워크가 엄청 좋아서 다른거 다 죽임.
   //@ 이제는 같이써도 된다는 거 알아서 오케이~ 하고 같이 사용 완료!
   //@ 스프링의 철학적 개념 : "유연성"
   //@ 사람이라면 누구든 내 옆자리에 앉을 수 있어! - > 유연한 것...

   - 어플리케이션의 기본 틀 → 스프링 컨테이너
   //@ 스프링이라고 적혀 있지만, 다르게 이해해야 하는 경우 존재!
   //@ 굉장히 큰 컨테이너 박스...(공항, 항만에 있는). 이거 위치 얘기하기도 하고, 안에 굉장히 일 잘하는 일꾼 있는데 얘를 지칭하기도,
   //@ 일꾼들에게 지시한 업무를 지칭하기도.... 이런거 생각해 두기!

   스프링은 스프링 컨테이너 또는 어플리케이션 컨텍스트 라고 불리는
   스프링 런타임 엔진을 제공한다.
   스프링 컨테이너는 설정 정보(XML:배치 기술서)를 참고해서
   //@ 일 잘하는 로봇... 일을 똑똑히 잘 시켜야 잘 함!
   //@ 여기선 XML 기반. 이 뿐 아니라 어노테이션을 통해서도 가능! 
   //@ 어노테이션이 좀더 나중에 나왔지만 어노테이션 써야 할수있는건 아님.......! 스프링에 대한 철학을 알면 XML 사용하는걸 이해할 거!
   어플리케이션을 구성하는 오브젝트(객체)를 생성하고 관리한다.
   스프링 컨테이너는 독립적으로 동작할 수도 있지만
   보통... 웹 모듈에서 동작하는 서비스나 서블릿으로 등록해서 사용한다.
  
   스프링을 사용하려면 먼저 스프링 컨테이너를 다루는 방법과
   스프링 컨테이너가 어플리케이션 오브젝트를 이용할 수 있도록
   설정 정보를 작성하는 방법을 알아야 한다.

   ==> 설정 정보(XML)에 의해 어플리케이션을 구성하고
       객체를 생성, 관리하는 주체
   //@ 여태까지 주체는 우리였지만, 이제는 주체가 스프링 컨테이너다!

   - 공통 프로그래밍 모델 → IoC/DI, 서비스 추상화, AOP
     //@ 가이드라인
     프레임워크라는 어플리케이션을 구성하는 오브젝트(객체)가
     생성되고 동작하는 방식에 대한 틀을 제공해줄 뿐 아니라
     어플리케이션 코드가 어떻게 작성되어야 하는지에 대한 기준도 제시한다.
     이런 틀을 보통 프로그래밍 모델이라고 한다.
     스프링은 세 가지 핵심 프로그래밍 모델을 제공한다.

     ① IoC/DI //@ IoC가 DI 방식에 의해 객체를 관리한다.
        오브젝트 생명 주기와 의존 관계에 대한 프로그래밍 모델이다.
        스프링은 유연하고 확장성이 뛰어난 코드를 만들 수 있게 도와주는
        객체 지향 설계 원칙과 디자인 패턴의 핵심 원리를 담고 있는
        IoC/DI 를 프레임워크의 핵심 근간으로 삼고 있다.
        스프링 프레임워크에서 동작하는 코드는
        IoC/DI 방식을 따라 작성되어야 스프링이 제공하는 가치를 제대로 누릴 수 있다.
        스프링이 직접 제공하는 모든 기술과 API, 심지어 컨테이너 까지도
        IoC/DI 방식으로 작성되어(만들어져)있다.
        스프링을 바르게 이해하고 효율적으로 사용하는 데
        기본이 되며 가장 중요한 기술이다.
        //@ 스프링은 솔선수범. 본인부터 IoC DI 방법 사용
        
        ·IoC → - 객체 관리의 주체.
                 - Inversion of Control : 제어의 역전(역제어)
                 - 객체 생성과 관리를 직접 하는 것이 아니라
                   외부(컨테이너)에서 만들어진 오브젝트(객체)를
                   제공받는 입장이 되는 것.
		 //@ IoC 컨테이너 = 스프링 컨테이너
                 //@ 윌스미스가 캐비넷을 여니까 작은 외계인들이 자기세계를 가지고 살고 있음
		 //@ 스프링 컨테이너 안에 이런 세계가 펼쳐져 있다고 생각하면 됨!
                 //@ 작은 컨테이너인데 이 안에 공장이 존재. 이 공장에서 객체들 찍어냄. 필요한 객체들이 엔터프라이즈급으로 많음
                 //@ 스프링은 내가 혼자 짓겟다...이게 아니라 여러 공간에서 빌딩 올림
                 //@ 아파트 하나 짓겠다.. 엔터프라이즈급. 아파트 안에서 쓰이는 문여닫을때 쓰이는 문손잡이,경첩,창문: 엄청 여러개 필요함
                 //@ 수백수천수만개 필요할수 있음... 이런거는 찍어내야함, 이게 팩토리!
                 //@ 일하는 주체, 장소... 다 스프링 컨테이너라 부름!
                 - Bean : 스프링이 관리하는 대상.
                 - Bean Factory : 객체를 관리하는 주체.
                   일반적으로 이 기능을 확장한 Application Context 를 사용하게 된다.
                 - Application Context : Bean Factory 의 확장 버전. 
                 //@ 대규모 공장들이 모여있는 단지. 공단
                 - 설정 정보 : 어떤 객체들이 관리 대상인지 설정한 정보.
                   XML, Annotation 등을 이용한다.
                   객체 의존 관계도 표현되어 있다.
                 - IoC 컨테이너 : 객체를 등록하고 관리하는 공간.

	      
        ·DI  → - 객체를 관리하는 방법.
                 - 자바에서 객체를 생성하고 관리하는 방법은
		 //@ 휴대폰은 전화기이다. (is-a) 
                 //@ 총은 군인이다? X. 군인이 총을 가지고 있다. (has-a) 
                 //@ 객체 관련은 (has-a) 관계로 처리
                   모두 has-a 관계를 통해 처리해 왔기 때문에
                   이들은 모두 의존 관계가 치밀하고 밀접한 상황일 수 밖에 없다.
                   때문에... 이러한 강한 결합 상태는
                   유연성을 떨어뜨리는 결과를 초래하게 된다.
                   이러한 결합 상태를 풀어주는 과정(방법)이 바로 DI 이다.
                 - Dependency Injection : 의존성 주입(의존관계 주입)
                 //@ 주사기로 쭉 밀어넣음!
                 - 의존관계 주입 : 의존 객체를... 이 객체를 사용하는 객체에...                 
                 - 외부에서 주입하는 액션(상태)
                 - 의존 관계 : A 가 실행되기 위해서 B 를 필요로 하는 상태
                 - 의존 객체 : A 입장에서 의존 객체는 B (즉, 주입되는 객체)

                 ※ 우선... A 객체에 B 객체의 주소를 넘겨줌으로써
                    B 객체를 사용하게 된다면...
                    A 객체는 여전히 B 객체를 사용하는 데는 문제가 없고,
                    B 객체는 A 객체와의 결합 상태가 느슨해진다고 할 수 있다.
                    
                    이 때, 넘겨주는 방법은 생성자 또는 setter() 메소드를
                    이용하는 방법이 있다.
                    
                    DI 를 위해 객체는 작은 객체부터 생성해서                    
                    큰 객체로 DI 하게 된다.
                    //@ 작은 부품부터 만들어서 큰거로!

                    //@ 선풍기 다 만들 때까지..... 아직 소멸하면 안 돼~!
                    이 때, 완성된 오브젝트(객체)가 만들어 질 때 까지
                    객체를 관리할 주체가 필요하게 되는데
                    그 역할을 하는 것이 바로 컨테이너인 것이다.


     ② 서비스 추상화
        스프링을 사용하면 환경이나 서버, 특정 기술에
        종속되지 않고 이식성이 뛰어나며 유연한 어플리케이션을
        만들 수 있게 되는데, 이를 가능하게 해 주는 것이 바로 서비스 추상화이다.
        구체적인 기술과 환경에 종속되지 않도록
        유연한 추상 계층을 두는 방법이다.
        //@ 사람 A가 있어야 해!/사람만 있으면 돼~ 오른쪽이 추상적
      
     ③ AOP(Aspect Oriented Programming)
        이 AOP 는 어플리케이션 코드에 산재해서 나타나는 부가적인 기능을
        독립적인 상태로 모듈화하는 프로그래밍 모델이다.
        스프링은 AOP 를 이용해서 다양한 엔터프라이즈 서비스를
        적용하고도 깔끔한 코드를 유지할 수 있게 해준다.  

     //@ OOP(Object Oriented Programming)
              객체   지향     프로그래밍
	: 객체 중심 프로그래밍 기법. 객체가 중심임!
     //@ AOP(Aspect Oriented Programming)
             관심사  지향     프로그래밍

     //@ OOP + AOP.. AOP가 OOP를 도와주는, 첨가하는 개념임.

   - 기술 API
	
     //@ 자기가 먼저 솔선수범해야 좋은 지휘관임... 너네 출동해! 가 아니라 나를 따르라! 가 되어야 함...
     //@ 너네는 이렇게 해야해! 나는 안이랫지롱^^ 이 아님 Spring은 솔선수범함
     스프링은 엔터프라이즈 어플리케이션 개발의 다양한 영역에
     바로 활용될 수 있는 방대한 양의 기술 API 를 제공한다.
     UI 작성은 물론이고, 웹 프리젠테이션 계층, 비즈니스 서비스 계층
     , 기반 서비스 계층, 도메인 계층, 데이터 액세스 계층 등에서
     필요한 주요 기술을 스프링에서 일관된 방식으로 사용할 수 있도록
     지원해주는 전략 클래스를 제공한다.
     스프링이 제공하는 API 와 지원 기술을
     모두 스프링 프로그래밍 모델에 따라 작성되었기 때문에
     이를 가져다 쓰는 것만으로도
     스프링 프로그래밍 모델을 코드에 자연스럽게 적용할 수 있다.
     스프링의 모든 기술은 표준 자바 엔터프라이즈 플랫폼(JavaEE)
     에 기술을 두고 있다.
     표준 기술과 더불어 유명 오픈 소스 기술과 주요 상용 기술에 대한
     지원 기능도 다양하게 제공된다.


○ 스프링 프레임워크(Spring Framework)의 주요 기능과 특징

   1. 경량 컨테이너
      자바 객체를 담고, 이들 자바 객체의 생성과 소멸의
      라이프 사이클을 관리.
 
   2. DI(Dependency Injection)
      의존성(관계) 주입(삽입)을 지원. 
      설정 파일을 통해 객체간의 의존 관계를 정의.
 
   3. AOP(Aspect Oriented Programming) 지원
      관점 지향 프로그래밍을 지원.
      여러 모듈에 공통적으로 쓰이는 기능을 분리하여
      각 모듈에 적용하는 것이 가능.

   4. POJO(Plane Old Java Object) 지원
      가장 기본적인 자바 객체를 지원하여
      기존 작성 코드의 유지성을 향상.
      → 보통의 자바(빈) 객체.
         - 상속(x)
         - 인터페이스(x)

   5. 트랜잭션 처리
      JDBC 나 JTA 를 사용하는 설정 파일을 통해
      트랜잭션을 관리하여 동일한 코드를 여러 환경에서
      사용하도록 하는 것이 가능.

   6. 다양한 프레임워크와 조합
      myBatis(iBatis), Hivernate, Struts, Struts2, JPA, JDO, JMS, Quartz 등
      다른 프레임워크 뿐 아니라 사용자가 만든 프레임워크와의 연동성을 제공한다.
      //@ 유연성


//@ ioc 컨테이너 = 스프링 컨테이너, 스프링 컨테이너가 즉 스프링
//@ ioc 컨테이너가 잘 움직이려면 스프링 컨테이너가 주체가 되어서 객체 생성 필요
//@ 이 때 객체 생성하는게 bean.. bean 찍어내기 위해서 빈 팩토리 필요
//@ 단일공장으로 하나만 있을때는 빈 팩토리... 여러개 모여있으면 공단(어플리케이션 컨텍스트)
//@ 찍어낸 객체들이 어! A라는 객체가 일하려면 b객체 필요하네? 의존 관계
//@ 이제는 우리가 생성하지 않음. 객체 생성도 스프링이.. 이거 안에 넣어주는거도 스프링.. 그걸 필요한만큼 유지도 스프링이.
//@ 우리는 스프링이 그렇게 할 수 있도록 잘 설정만 해 줌.
//@ 스프링은, 설정이, 80%! 90%까지 볼 수 있음.

※ 스프링 프레임워크(Spring Framework) 에서 가장 중요한 개념
   
   - DI(Dependency Injection, 의존성 주입, 의존관계 주입) //@ 객체를 관리하는 방식
     : 객체를 생성하고 관리하는 의존성에 대해서
       어떻게 처리하는가에 대한 개념.

   - IoC(Inversion of Control, 제어의 역전) //@ 객체를 관리하는 주체
     : 인스턴스의 생성부터 소멸까지의 인스턴스 생명주기 관리를
       컨테이너가 대신하는 개념. 


























  















